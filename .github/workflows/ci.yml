name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DEPLOY_PATH: /home/app
  SERVER_DOMAIN: 45.153.68.43
  SERVER_USER: root

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Установка Docker и логин в Docker Hub
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Создание .env из секрета
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 --decode > .env

      # Сборка Docker-образа
      - name: Build Docker image
        run: docker compose --env-file=.env build

      # Проверка существования образа
      - name: Check if Docker image exists
        run: |
          if ! docker image inspect app_server:latest &> /dev/null; then
            echo "Error: Docker image 'app_server:latest' not found!"
            exit 1
          fi

      # Сохранение Docker-образа в tar-файл
      - name: Save Docker image
        run: docker save -o image.tar app_server:latest

      # Настройка SSH ключа
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.SERVER_DOMAIN }} >> ~/.ssh/known_hosts

      # Создание удаленной директории, если она не существует
      - name: Create remote directory if it doesn't exist
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} \
            "mkdir -p $DEPLOY_PATH"

      # Копирование файлов на сервер
      - name: Deploy to server
        run: |
          scp -v -r -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            image.tar \
            .env \
            docker-compose.yaml \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }}:$DEPLOY_PATH/

      # Проверка успешности копирования файлов
      - name: Verify files on server
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} "
            if [ ! -f $DEPLOY_PATH/image.tar ]; then
              echo 'Error: image.tar not found on server!'
              exit 1
            fi
            if [ ! -f $DEPLOY_PATH/.env ]; then
              echo 'Error: .env not found on server!'
              exit 1
            fi
            if [ ! -f $DEPLOY_PATH/docker-compose.yaml ]; then
              echo 'Error: docker-compose.yaml not found on server!'
              exit 1
            fi
            echo 'All files are present on the server.'
          "

      # Загрузка Docker-образа и запуск контейнеров
      - name: Load Docker image and start containers
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} "
            if ! command -v docker &> /dev/null; then
              echo 'Error: Docker is not installed!'
              exit 1
            fi
            cd $DEPLOY_PATH
            echo 'Loading Docker image...'
            docker load -i image.tar || { echo 'Error: Failed to load Docker image'; exit 1; }
            echo 'Starting containers...'
            docker compose --env-file=.env up -d || { echo 'Error: Failed to start containers'; exit 1; }
            echo 'Deployed successfully!'
          "

      # Очистка временных файлов на сервере
      - name: Clean up server
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} "
            cd $DEPLOY_PATH
            rm -f image.tar
            echo 'Cleanup completed.'
          "